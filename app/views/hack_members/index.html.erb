<div class="row">
  <div class="large-12 columns">
<h1>Hack members</h1>

<%= link_to 'New Hack member', new_hack_member_path, :class => 'button' %>

<br>
</div>
</div>

<!--table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Initials</th>
      <th>First name</th>
      <th>Surname</th>
      <th>Tel home</th>
      <th>Tel office</th>
      <th>Tel cell</th>
      <th>Email</th>
      <th>Email ok</th>
      <th>Email issues</th>
      <th>Non hacker</th>
      <th>Comments</th>
      <th>Contact via</th>
      <th>Group with</th>
      <th>Hack attendances count</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>

  <tbody>
    <%# @hack_members.each do |hack_member| %>
      <tr>
        <td><%#= hack_member.title %></td>
        <td><%#= hack_member.initials %></td>
        <td><%#= hack_member.first_name %></td>
        <td><%#= hack_member.surname %></td>
        <td><%#= hack_member.tel_home %></td>
        <td><%#= hack_member.tel_office %></td>
        <td><%#= hack_member.tel_cell %></td>
        <td><%#= hack_member.email %></td>
        <td><%#= hack_member.email_ok %></td>
        <td><%#= hack_member.email_issues %></td>
        <td><%#= hack_member.non_hacker %></td>
        <td><%#= hack_member.comments %></td>
        <td><%#= hack_member.contact_via %></td>
        <td><%#= hack_member.group_with %></td>
        <td><%#= hack_member.hack_attendances_count %></td>
        <td><%#= link_to 'Show', hack_member %></td>
        <td><%#= link_to 'Edit', edit_hack_member_path(hack_member) %></td>
        <td><%#= link_to 'Destroy', hack_member, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <%# end %>
  </tbody>
</table>

<br-->

<div class="row">
  <div class="large-4 columns">
    <div class="row collapse">
      <div class="large-10 columns">
        <input type=search id="txtSearch" placeholder="Search...">
      </div>
      <div class="large-2 columns">
        <span class="postfix radius"><i class="fi-page-search"></i></span>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="large-12 columns">
      <!--div id="myGrid" style="width:100%;height:300px;"></div-->
      <div id="myGrid" style="width:100%;height:300px;"></div>
    </div>
  </div>


<% content_for :late_js do %>
<script>
    var RowNumberFormatter = function(row, cell, value, columnDef, dataContext) {
      return row + 1 + ' ';
    };
    var EditLinkFormatter = function(row, cell, value, columnDef, dataContext) {
      return '<a href="hack_members/'+dataContext.id+'/edit">edit</a>';
    };
    var ShowLinkFormatter = function(row, cell, value, columnDef, dataContext) {
      return '<a href="hack_members/'+dataContext.id+'">show</a>';
    };

  var grid;
  var data = <%= @grid_data.html_safe %>;
  var options = {
    editable: true,
    enableCellNavigation: true,
    enableColumnReorder: false, // load JQ UI sort...
    autoEdit: false,

    enableTextSelectionOnCells: true,
    //multiSelect: false,
    syncColumnCellResize: true,
    //enableColumnReorder: true, needs jq ui sortable
    //multiColumnSort: true

  };
  var columns = <%= @grid_columns.html_safe %>;
  columns.unshift({id:'show', name:'Show',field:'show', formatter:ShowLinkFormatter, unfiltered:true});
  columns.unshift({id:'edit', name:'Edit',field:'edit', formatter:EditLinkFormatter, unfiltered:true});
  columns.unshift({id:'rowNumber', name:'Row', field: 'rn', formatter:RowNumberFormatter, behavior:'select', cssClass:'cell-selection', width:40, cannotTriggerInsert:true, resizable:false, unselectable:true, sortable:false, unfiltered:true, cssClass: 'ui-state-default jqgrid-rownum slk_cell_right_align'});

  var searchString = "";
  var selectedIds = [];

  $(function () {
    // for (var i = 0; i < 100; i++) {
    //   var d = (data[i] = {});
    //   d['id'] = i + 1;
    //   d[0] = "Row " + i;
    // }

    // columns.push({id: 'id', name: 'id', field: 'id'});

    // for (var i = 0; i < 5; i++) {
    //   columns.push({
    //     id: i,
    //     name: String.fromCharCode("A".charCodeAt(0) + i),
    //     field: i,
    //     width: 100,
    //   });
    // }

    // initialize the model
    dataView = new Slick.Data.DataView({ inlineFilters: true });
    dataView.beginUpdate();
    dataView.setItems(data);
    dataView.setFilter(myFilter);
    dataView.endUpdate();

    grid = new Slick.Grid("#myGrid", dataView, columns, options);
    grid.setSelectionModel(new Slick.RowSelectionModel({selectActiveRow: false}));
//    var filterPlugin = new Ext.Plugins.HeaderFilter({sortAvailable: false});

    
    // wire up model events to drive the grid
    dataView.onRowCountChanged.subscribe(function (e, args) {
      grid.updateRowCount();
      grid.render();
    });

    dataView.onRowsChanged.subscribe(function (e, args) {
      grid.invalidateRows(args.rows);
      grid.render();
    });

    var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, options);

    // wire up the search textbox to apply the filter to the model
    // TODO: also need to pick up click of [x] to clear search box...
    $("#txtSearch").keyup(function (e) {
      // clear on Esc
      if (e.which == 27) {
        this.value = "";
      }

      searchString = this.value;
      dataView.refresh();
    });

  function myFilter(item, args) {
        // Get columns, but exclude non-filterable ones.
        var columns = [];
        if (grid === undefined) { return true; }
        jQuery.each(grid.getColumns(), function(i,val) {
          if(!val.unfiltered) { columns.push(val); }
        });
        var value = true;
        var searchHit = false;

        // for (var i = 0; i < columns.length; i++) {
        //     var col = columns[i];
        //     var filterValues = col.filterValues;

        //     if (filterValues && filterValues.length > 0) {
        //         value = value & _.contains(filterValues, item[col.field]);
        //     }
        // }
        if(value && searchString != '') {
          for (var i = 0; i < columns.length; i++) {
              var col = columns[i];
              if (String(item[col.field]).toLowerCase().indexOf(searchString.toLowerCase()) !== -1) {
                searchHit = true;
              }
          }
          return searchHit;
        }
        return value;

    // if (searchString != "" && item['surname'].indexOf(searchString) == -1) {
    //   return false;
    // }

    // return true;
  }

  })
</script>
<% end %>
